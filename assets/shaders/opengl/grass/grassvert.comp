#version 450

struct VertexGrass {
  vec3 position;
  vec3 color;
  vec3 normal;
  vec3 wind_pos;
  float trample_value;
};

struct DrawGrass {
	vec3 position;
};

layout(std430, set=0, binding=0) buffer in_grass_vertices {
		int total_grass_vertices; 
		vec3 grass_vertices[];
	};

layout(std430, set=0, binding=1) buffer out_draw_grass_vertices {
		uint total_draw_grass_vertices;
		vec3 draw_grass_vertices[];
	};
layout(std430, set=0, binding=2) buffer out_draw_grass_indices {
		uint total_draw_grass_indices;
		uint draw_grass_indices[];
};


void main(){
	//const uint i = gl_GlobalInvocationID.x;
	//result[i] = a[i] + b[i];

	total_grass_vertices = 3;

	uint total_vertices = 3;
	uint total_indices = 3;

	uint vertex_start = atomicAdd(total_draw_grass_vertices, total_vertices);
	uint indice_start = atomicAdd(total_draw_grass_indices, total_indices);

//
	//uint vertex_start = 0;
	//uint indice_start = 0;
//
	//total_grass_vertices = total_grass_vertices + 1;
//
	//draw_grass_vertices[vertex_start] = vec3(-1.0, 1.0, 0.0);
	//draw_grass_vertices[vertex_start + 1] = vec3(-1.0, -2.0, 0.0);
	//draw_grass_vertices[vertex_start + 2] = vec3(2.0, 1.0, 0.0);
//
	//draw_grass_indices[indice_start] = 0;
	//draw_grass_indices[indice_start + 1] = 1;
	//draw_grass_indices[indice_start + 2] = 2;
}